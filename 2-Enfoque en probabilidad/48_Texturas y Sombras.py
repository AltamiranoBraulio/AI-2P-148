# üî∂ Importaci√≥n de las librer√≠as necesarias
import cv2  # Librer√≠a OpenCV para procesamiento de im√°genes
import numpy as np  # Librer√≠a para operaciones num√©ricas
import matplotlib.pyplot as plt  # Librer√≠a para graficar las im√°genes

# üö© Paso 1: Cargar la imagen
# Leemos la imagen original en escala de grises para trabajar en ella.
# La conversi√≥n a escala de grises facilita el an√°lisis de texturas y sombras, ya que simplifica los colores a intensidades de p√≠xel.
img = cv2.imread('tu_imagen.jpg', cv2.IMREAD_GRAYSCALE)

# Verificamos si la imagen fue cargada correctamente
if img is None:
    print("‚ùå Error: No se encontr√≥ la imagen. Aseg√∫rate de que 'tu_imagen.jpg' est√© en la carpeta.")
    exit()  # Finaliza el c√≥digo si la imagen no se carga correctamente

# -----------------------------
# üéØ Paso 2: Filtrado de texturas utilizando un filtro de suavizado (Blur)
# Los filtros de suavizado (blur) son √∫tiles para eliminar detalles finos de la imagen, permitiendo resaltar texturas de baja frecuencia.
# Usamos un filtro gaussiano para suavizar la imagen, el cual difumina los p√≠xeles cercanos y reduce el ruido en la imagen.
# La funci√≥n cv2.GaussianBlur toma dos par√°metros principales: la imagen de entrada y el tama√±o del kernel.
blurred = cv2.GaussianBlur(img, (5, 5), 0)  # Tama√±o del kernel de 5x5 p√≠xeles

# -----------------------------
# üéØ Paso 3: Detecci√≥n de bordes (enfoque en las texturas)
# Para resaltar las texturas de alta frecuencia, utilizamos el algoritmo de detecci√≥n de bordes de Canny.
# Este algoritmo resalta los bordes m√°s n√≠tidos de las regiones en la imagen, lo cual es √∫til para identificar las texturas.
edges = cv2.Canny(img, 100, 200)  # Umbrales bajos y altos para la detecci√≥n de bordes

# -----------------------------
# üéØ Paso 4: Sombras - Realce de sombras
# Las sombras son √°reas de la imagen con intensidad baja. Podemos intentar realzarlas usando un contraste adaptativo.
# Esto se logra mediante la funci√≥n de ecualizaci√≥n del histograma, que mejora las √°reas m√°s oscuras.
equalized = cv2.equalizeHist(img)  # Ecualizaci√≥n de histograma para mejorar las sombras

# -----------------------------
# üñºÔ∏è Paso 5: Visualizar los resultados
# Usamos matplotlib para visualizar las im√°genes originales y los resultados del procesamiento.
# Mostramos la imagen original, la imagen con bordes detectados (texturas), la imagen suavizada (filtro) y la imagen con sombras mejoradas.
plt.figure(figsize=(12, 8))  # Define el tama√±o de la figura.

# Imagen original
plt.subplot(2, 3, 1)  # Organiza el gr√°fico en una rejilla de 2x3, colocando la imagen original en la primera posici√≥n.
plt.imshow(img, cmap='gray')  # Muestra la imagen original en escala de grises.
plt.title('Imagen Original')  # T√≠tulo de la imagen original
plt.axis('off')  # Elimina los ejes del gr√°fico

# Imagen suavizada (Blur)
plt.subplot(2, 3, 2)  # Coloca la imagen suavizada en la segunda posici√≥n.
plt.imshow(blurred, cmap='gray')  # Muestra la imagen suavizada para resaltar texturas de baja frecuencia.
plt.title('Imagen Suavizada (Blur)')  # T√≠tulo de la imagen suavizada
plt.axis('off')  # Elimina los ejes del gr√°fico

# Detecci√≥n de bordes (Texturas)
plt.subplot(2, 3, 3)  # Coloca la imagen de bordes en la tercera posici√≥n.
plt.imshow(edges, cmap='gray')  # Muestra los bordes detectados en la imagen para resaltar las texturas.
plt.title('Detecci√≥n de Bordes (Texturas)')  # T√≠tulo de la detecci√≥n de bordes
plt.axis('off')  # Elimina los ejes del gr√°fico

# Imagen con sombras realzadas
plt.subplot(2, 3, 4)  # Coloca la imagen con sombras mejoradas en la cuarta posici√≥n.
plt.imshow(equalized, cmap='gray')  # Muestra la imagen con sombras mejoradas.
plt.title('Sombras Realzadas (Ecualizaci√≥n)')  # T√≠tulo de la mejora de sombras
plt.axis('off')  # Elimina los ejes del gr√°fico

# Mostrar todas las im√°genes procesadas en una ventana
plt.show()  # Muestra las im√°genes con los diferentes resultados de procesamiento.
