# ---------------------------------------------
# 游눠 Agrupamiento de Pel칤culas con K-means
# ---------------------------------------------

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# ---------------------------------------------
# 1. 游늵 Datos Simulados de Pel칤culas
# Caracter칤sticas: [Duraci칩n (minutos), N칰mero de Rese침as, Calificaci칩n Promedio]
X = np.array([
    [90, 1200, 4.5],  # Pel칤cula 1
    [150, 3000, 4.8], # Pel칤cula 2
    [100, 200, 3.9],  # Pel칤cula 3
    [140, 1500, 4.2], # Pel칤cula 4
    [85, 300, 4.0],   # Pel칤cula 5
    [110, 4000, 4.7], # Pel칤cula 6
    [120, 1800, 4.3], # Pel칤cula 7
])

# ---------------------------------------------
# 2. 游댃 Aplicaci칩n de K-means
# Vamos a agrupar las pel칤culas en 2 grupos: Acci칩n y Drama (como ejemplo)

modelo_kmeans = KMeans(n_clusters=2, random_state=42)
modelo_kmeans.fit(X)

# ---------------------------------------------
# 3. 游꿛 Visualizaci칩n de los Resultados
# Dibujamos las pel칤culas en funci칩n de su duraci칩n y calificaci칩n

plt.figure(figsize=(8, 6))

# Usamos los colores de los clusters para diferenciar las pel칤culas
plt.scatter(X[:, 0], X[:, 2], c=modelo_kmeans.labels_, cmap='viridis', s=100)

# Etiquetas de los ejes
plt.title('游눠 Agrupamiento de Pel칤culas: Acci칩n vs Drama')
plt.xlabel('Duraci칩n (minutos)')
plt.ylabel('Calificaci칩n Promedio')

# Mostramos los centros de los clusters (medias de duraci칩n y calificaci칩n)
centros = modelo_kmeans.cluster_centers_
plt.scatter(centros[:, 0], centros[:, 2], c='red', marker='X', s=200, label='Centros de Clusters')

# Mostramos la leyenda
plt.legend()

# Mostramos el gr치fico
plt.show()

# ---------------------------------------------
# 4. 游늵 Imprimir los Centros de los Clusters
print("Centros de los Clusters encontrados por K-means (Duraci칩n, Calificaci칩n):")
print(centros)
