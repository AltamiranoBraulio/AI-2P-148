# üî∂ Importaci√≥n de las librer√≠as necesarias
import cv2  # OpenCV para procesamiento de im√°genes
import matplotlib.pyplot as plt  # Para mostrar la imagen y resultados

# üö© Paso 1: Cargar la imagen y el clasificador HOG
# Cargamos la imagen que contiene los objetos a detectar.
# En este caso, usamos una imagen de ejemplo que contiene personas.
img = cv2.imread('tu_imagen_con_personas.jpg')

# Verificamos si la imagen fue cargada correctamente
if img is None:
    print("‚ùå Error: No se encontr√≥ la imagen. Aseg√∫rate de que 'tu_imagen_con_personas.jpg' est√© en la carpeta.")
    exit()

# üö© Paso 2: Inicializaci√≥n del detector HOG de OpenCV
# OpenCV viene con un detector HOG pre-entrenado para la detecci√≥n de personas.
hog = cv2.HOGDescriptor()  # Creamos un descriptor HOG
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())  # Usamos el detector pre-entrenado

# üö© Paso 3: Detectar personas en la imagen
# La funci√≥n detectMultiScale se utiliza para detectar objetos en la imagen.
# Devuelve una lista de rect√°ngulos que contienen las personas detectadas.
# El par√°metro 'scale' ayuda a ajustar la detecci√≥n a diferentes tama√±os de personas.
# 'winStride' y 'padding' ajustan la precisi√≥n de la detecci√≥n.
boxes, weights = hog.detectMultiScale(img, winStride=(8, 8), padding=(8, 8), scale=1.05)

# üö© Paso 4: Dibujar los resultados en la imagen
# Dibujamos un rect√°ngulo alrededor de cada persona detectada.
for (x, y, w, h) in boxes:
    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)  # Dibuja el rect√°ngulo en color verde

# üö© Paso 5: Mostrar la imagen con los objetos detectados
# Convertimos la imagen a RGB para poder mostrarla correctamente con matplotlib.
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Mostramos la imagen con los objetos detectados
plt.imshow(img_rgb)
plt.title('Detecci√≥n de Personas con HOG')  # T√≠tulo
plt.axis('off')  # Eliminar los ejes
plt.show()  # Mostrar la imagen
