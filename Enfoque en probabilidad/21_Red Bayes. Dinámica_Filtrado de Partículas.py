import numpy as np
import matplotlib.pyplot as plt

# -----------------------------
# üêâ Escenario: El Drag√≥n en el Bosque M√°gico
# -----------------------------
# N√∫mero de part√≠culas (representan posibles ubicaciones del drag√≥n)
num_particulas = 1000

# N√∫mero de pasos de tiempo (simulamos 50 pasos de vuelo)
num_pasos = 50

# Inicializaci√≥n de la ubicaci√≥n y energ√≠a del drag√≥n
posicion_latente = np.zeros(num_pasos)  # Posiciones latentes del drag√≥n
energia_latente = np.zeros(num_pasos)  # Energ√≠a real del drag√≥n

# Mediciones ruidosas (lo que "vemos" del drag√≥n)
posicion_observada = np.zeros(num_pasos)
energia_observada = np.zeros(num_pasos)

# Simulamos el vuelo del drag√≥n (latentes)
for t in range(1, num_pasos):
    # El drag√≥n vuela, y su posici√≥n cambia con ruido del entorno
    posicion_latente[t] = posicion_latente[t-1] + np.random.normal(0, 2)  # Ruido de vuelo
    energia_latente[t] = energia_latente[t-1] - np.random.normal(0, 0.5)  # Ruido de energ√≠a

    # Mediciones ruidosas (sensor m√≠stico que mide la posici√≥n y energ√≠a)
    posicion_observada[t] = posicion_latente[t] + np.random.normal(0, 3)  # Ruido de medici√≥n
    energia_observada[t] = energia_latente[t] + np.random.normal(0, 1)  # Ruido de medici√≥n

# -----------------------------
# üå≤ Inicializaci√≥n del Filtrado de Part√≠culas (Drag√≥n)
# -----------------------------
# Inicializamos las part√≠culas con posiciones y energ√≠as aleatorias
particulas_posicion = np.random.normal(0, 10, num_particulas)  # Posici√≥n inicial aleatoria
particulas_energia = np.random.normal(100, 50, num_particulas)  # Energ√≠a inicial aleatoria

# -----------------------------
# üßô‚Äç‚ôÇÔ∏è Funci√≥n de Actualizaci√≥n del Drag√≥n (Vuelo M√°gico)
# -----------------------------
# Actualiza las part√≠culas bas√°ndose en un vuelo aleatorio del drag√≥n
def actualizar_particulas(particulas, ruido, delta=0.1):
    # El 'delta' es el cambio en la posici√≥n o energ√≠a
    return particulas + delta + np.random.normal(0, ruido, num_particulas)  # Agrega ruido al vuelo

# -----------------------------
# üîÆ Funci√≥n de Reponderaci√≥n (Medici√≥n M√°gica)
# -----------------------------
# Reponderamos las part√≠culas seg√∫n las mediciones m√°gicas (ruidosas)
def reponderar_particulas(particulas, medicion, sigma):
    # Calculamos las distancias entre las part√≠culas y la medici√≥n observada
    distancias = np.abs(particulas - medicion)
    # Calculamos los pesos basados en la probabilidad de estar cerca de la medici√≥n
    pesos = np.exp(-distancias**2 / (2 * sigma**2))  # Probabilidad de la distancia
    # Normalizamos los pesos para que sumen 1
    pesos /= np.sum(pesos)  
    return pesos

# -----------------------------
# üîÆ Funci√≥n de Re-muestreo (Reemplace a las Part√≠culas)
# -----------------------------
# Re-muestreamos las part√≠culas seg√∫n los pesos calculados
def re_muestrear_particulas(particulas, pesos):
    # Elegimos part√≠culas con probabilidad proporcional a sus pesos
    indices = np.random.choice(range(num_particulas), size=num_particulas, p=pesos)
    return particulas[indices]

# -----------------------------
# üêâ Proceso de Filtrado de Part√≠culas (Drag√≥n M√°gico)
# -----------------------------

# Arreglos para las estimaciones de la posici√≥n y energ√≠a
estimaciones_posicion = []
estimaciones_energia = []

for t in range(1, num_pasos):
    # El drag√≥n vuela y actualiza su posici√≥n y energ√≠a
    particulas_posicion = actualizar_particulas(particulas_posicion, ruido=2)  # Actualizaci√≥n con ruido
    particulas_energia = actualizar_particulas(particulas_energia, ruido=1)  # Actualizaci√≥n con ruido

    # Mediciones m√°gicas de la posici√≥n y energ√≠a del drag√≥n (lo que se observa)
    medicion_posicion = posicion_observada[t]  
    medicion_energia = energia_observada[t]  

    # Reponderamos las part√≠culas con base en las mediciones
    pesos_posicion = reponderar_particulas(particulas_posicion, medicion_posicion, sigma=3)  # Ponderamos posici√≥n
    pesos_energia = reponderar_particulas(particulas_energia, medicion_energia, sigma=1)  # Ponderamos energ√≠a

    # Re-muestreamos las part√≠culas seg√∫n los pesos calculados
    particulas_posicion = re_muestrear_particulas(particulas_posicion, pesos_posicion)
    particulas_energia = re_muestrear_particulas(particulas_energia, pesos_energia)

    # Estimamos la posici√≥n y energ√≠a del drag√≥n como la media de las part√≠culas
    estimacion_posicion = np.mean(particulas_posicion)  # Promedio de las posiciones
    estimacion_energia = np.mean(particulas_energia)    # Promedio de las energ√≠as

    # Guardamos las estimaciones para graficarlas despu√©s
    estimaciones_posicion.append(estimacion_posicion)
    estimaciones_energia.append(estimacion_energia)

# -----------------------------
# üé® Visualizaci√≥n de los Resultados del Vuelo M√°gico
# -----------------------------

# Graficamos las estimaciones junto con las mediciones ruidosas
plt.figure(figsize=(12, 6))

# Gr√°fica de Posici√≥n del Drag√≥n
plt.subplot(1, 2, 1)
plt.plot(posicion_latente, label='Posici√≥n Real', color='g', linewidth=2)  # Posici√≥n real del drag√≥n
plt.plot(estimaciones_posicion, label='Estimaci√≥n Posici√≥n', color='b', linestyle='--', linewidth=2)  # Estimaci√≥n
plt.scatter(range(num_pasos), posicion_observada, label='Mediciones Ruidosas', color='r', alpha=0.5)  # Mediciones ruidosas
plt.xlabel('Tiempo')
plt.ylabel('Posici√≥n del Drag√≥n')
plt.title('Filtrado de Part√≠culas - Estimaci√≥n de Posici√≥n')
plt.legend()
plt.grid(True)

# Gr√°fica de Energ√≠a del Drag√≥n
plt.subplot(1, 2, 2)
plt.plot(energia_latente, label='Energ√≠a Real', color='g', linewidth=2)  # Energ√≠a real del drag√≥n
plt.plot(estimaciones_energia, label='Estimaci√≥n Energ√≠a', color='b', linestyle='--', linewidth=2)  # Estimaci√≥n
plt.scatter(range(num_pasos), energia_observada, label='Mediciones Ruidosas', color='r', alpha=0.5)  # Mediciones ruidosas
plt.xlabel('Tiempo')
plt.ylabel('Energ√≠a del Drag√≥n')
plt.title('Filtrado de Part√≠culas - Estimaci√≥n de Energ√≠a')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
