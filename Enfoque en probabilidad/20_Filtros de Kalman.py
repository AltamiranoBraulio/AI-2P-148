import numpy as np  # Importamos numpy para trabajar con matrices y √°lgebra lineal
import matplotlib.pyplot as plt  # Importamos matplotlib para graficar resultados

# ---------------------------------------------
# üöó Simulaci√≥n: Auto en movimiento
# Queremos estimar la posici√≥n y velocidad del auto con un filtro de Kalman
# ---------------------------------------------

# Establecemos el intervalo de tiempo entre cada medici√≥n
dt = 1.0  # intervalo de tiempo (1 segundo)

# Generamos un array de tiempos de 0 a 20 segundos, en pasos de 1 segundo
tiempos = np.arange(0, 20, dt)  # 20 segundos

# El auto se mueve a una velocidad constante de 2 metros por segundo
# La verdadera posici√≥n sigue una funci√≥n lineal con pendiente 2
verdadera_posicion = 2 * tiempos  # Establecemos la posici√≥n real, 2 m/s
# La verdadera velocidad es constante y vale 2 m/s
verdadera_velocidad = 2 * np.ones_like(tiempos)  # Velocidad constante

# Simulamos las mediciones del GPS, las cuales tienen ruido (desviaci√≥n est√°ndar de 2 metros)
ruido_sensor = np.random.normal(0, 2, size=tiempos.shape)  # Ruido gaussiano (desviaci√≥n est√°ndar 2)
# Las mediciones son las posiciones reales m√°s el ruido
mediciones = verdadera_posicion + ruido_sensor  # Mediciones ruidosas (con error)

# ---------------------------------------------
# üîß Filtro de Kalman en 2D (posici√≥n y velocidad)
# ---------------------------------------------

# El estado inicial es [posici√≥n, velocidad], lo comenzamos en [0, 0]
# Esto significa que al principio, no sabemos ni la posici√≥n ni la velocidad
x = np.array([[0],  # posici√≥n inicial
              [0]])  # velocidad inicial

# La incertidumbre inicial sobre nuestro estado es alta, porque no tenemos informaci√≥n precisa
P = np.array([[1000, 0],  # Gran incertidumbre en posici√≥n
              [0, 1000]])  # Gran incertidumbre en velocidad

# El modelo de transici√≥n F describe c√≥mo se actualiza el estado del auto con el tiempo
# El auto se mueve con velocidad constante: posici√≥n actual = posici√≥n anterior + velocidad * dt
F = np.array([[1, dt],  # [posici√≥n, velocidad] en el siguiente paso, para la posici√≥n
              [0, 1]])  # La velocidad no cambia con el tiempo en este caso (aceleraci√≥n constante = 0)

# La matriz de control B no se utiliza aqu√≠, porque no estamos controlando la aceleraci√≥n directamente
B = np.array([[0],  # Sin aceleraci√≥n externa
              [0]])  # Sin control sobre la velocidad

# La matriz de observaci√≥n H mapea el estado (posici√≥n, velocidad) a las mediciones visibles
# En este caso, solo medimos la posici√≥n, no la velocidad
H = np.array([[1, 0]])  # La medici√≥n solo depende de la posici√≥n, no de la velocidad

# Incertidumbre del sensor: R define la varianza del ruido en las mediciones
# En este caso, el GPS tiene un error de 2 metros (varianza = 4)
R = np.array([[4]])  # Ruido de medici√≥n (desviaci√≥n est√°ndar de 2 metros)

# La matriz de ruido del proceso Q define la incertidumbre en el modelo de movimiento
# Como estamos trabajando con velocidad constante, asumimos que la incertidumbre en la posici√≥n es baja y en la velocidad es mayor
Q = np.array([[1, 0],  # Un peque√±o error en la posici√≥n
              [0, 3]])  # Un poco m√°s de incertidumbre en la velocidad

# Creamos una lista para almacenar las estimaciones de la posici√≥n a lo largo del tiempo
estimaciones = []

# ---------------------------------------------
# üåÄ Ciclo del filtro: para cada medici√≥n, hacemos predicci√≥n y correcci√≥n
# ---------------------------------------------
for z in mediciones:  # Para cada medici√≥n (ruidosa)
    # ----------------------
    # Paso 1: Predicci√≥n üîÆ
    # ----------------------
    # Predicci√≥n del estado: c√≥mo se actualiza la posici√≥n y la velocidad en funci√≥n del modelo F
    x = F @ x + B  # Predicci√≥n del estado futuro. Multiplicamos F por el estado actual y agregamos B
    P = F @ P @ F.T + Q  # Predicci√≥n de la incertidumbre. La nueva incertidumbre depende de la anterior y del ruido del proceso (Q)

    # ----------------------
    # Paso 2: Actualizaci√≥n üõ†Ô∏è
    # ----------------------
    # Calculamos la ganancia de Kalman (K), que decide cu√°nto confiar en la medici√≥n frente a la predicci√≥n
    # S es la incertidumbre total de la medici√≥n
    S = H @ P @ H.T + R  # La incertidumbre total es la incertidumbre del estado predicho + el ruido de la medici√≥n
    K = P @ H.T @ np.linalg.inv(S)  # La ganancia de Kalman

    # Ahora corregimos el estado predicho con la nueva medici√≥n
    z = np.array([[z]])  # Convertimos la medici√≥n en un array para hacer la resta
    y = z - H @ x  # Innovaci√≥n (diferencia entre la medici√≥n y lo predicho por el modelo)

    # Actualizaci√≥n del estado usando la ganancia de Kalman y la innovaci√≥n
    x = x + K @ y  # El nuevo estado es la predicci√≥n corregida

    # Actualizaci√≥n de la incertidumbre (para futuras predicciones)
    P = (np.eye(2) - K @ H) @ P  # La incertidumbre se actualiza restando la ganancia de Kalman multiplicada por H

    # Guardamos la estimaci√≥n de la posici√≥n del auto
    estimaciones.append(x[0, 0])  # Solo nos interesa la posici√≥n, que es x[0, 0]

# ---------------------------------------------
# üé® Visualizaci√≥n
# ---------------------------------------------
# Graficamos el resultado final para comparar la verdadera posici√≥n, las mediciones y las estimaciones del filtro de Kalman
plt.figure(figsize=(10, 6))  # Creamos una figura de 10x6 pulgadas para la gr√°fica

# Graficamos la posici√≥n real del auto (sin ruido)
plt.plot(tiempos, verdadera_posicion, label='üöó Posici√≥n real', color='g', linewidth=2)

# Graficamos las mediciones con ruido (GPS)
plt.scatter(tiempos, mediciones, label='üì° Mediciones (con ruido)', color='r', marker='x')

# Graficamos las estimaciones de la posici√≥n usando el filtro de Kalman
plt.plot(tiempos, estimaciones, label='üéØ Estimaci√≥n por Kalman', color='b', linestyle='--', linewidth=2)

# A√±adimos etiquetas y t√≠tulo
plt.xlabel('Tiempo (s)')  # Eje x es el tiempo en segundos
plt.ylabel('Posici√≥n (m)')  # Eje y es la posici√≥n en metros
plt.title('Filtro de Kalman - Seguimiento de un auto üöó')  # T√≠tulo de la gr√°fica

# A√±adimos una leyenda para explicar las l√≠neas
plt.legend()

# Activamos una cuadr√≠cula para facilitar la lectura de la gr√°fica
plt.grid(True)

# Mostramos la gr√°fica
plt.show()
