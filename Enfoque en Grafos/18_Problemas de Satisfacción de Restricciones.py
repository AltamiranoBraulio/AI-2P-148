# Importar las clases necesarias de la librer√≠a python-constraint
# Problem: Para definir el problema CSP
# AllDifferentConstraint: Para implementar restricciones de "todos diferentes"
from constraint import Problem, AllDifferentConstraint

# Definir la funci√≥n principal que asignar√° tareas usando CSP
def asignar_tareas_familia():
    """Asigna tareas dom√©sticas a familiares usando CSP (Problema de Satisfacci√≥n de Restricciones)"""
    
    # 1. Crear una instancia del problema CSP
    # Esto inicializa un nuevo problema de satisfacci√≥n de restricciones vac√≠o
    problema = Problem()
    
    # 2. Definir las variables del problema (los familiares)
    # Cada familiar es una variable que debe recibir una tarea
    familiares = ["Pap√°", "Mam√°", "Hijo", "Hija", "Abuelo"]
    
    # 3. Definir los dominios (valores posibles para cada variable)
    # Lista de todas las tareas dom√©sticas posibles que pueden asignarse
    tareas = [
        "Cocinar", "Lavar platos", "Limpiar ba√±o", 
        "Aspirar", "Hacer compras", "Lavar ropa",
        "Regar plantas", "Pasear al perro"
    ]
    
    # 4. Agregar cada variable al problema con su dominio
    # Para cada familiar, el dominio es la lista completa de tareas
    for familiar in familiares:
        problema.addVariable(familiar, tareas)  # Asocia cada familiar con todas las tareas posibles
    
    # 5. Agregar restricciones al problema
    
    # a) Restricci√≥n global: Todos deben tener tareas diferentes
    # Usa AllDifferentConstraint para asegurar que ninguna tarea se repita
    problema.addConstraint(AllDifferentConstraint(), familiares)
    
    # b) Restricciones individuales basadas en preferencias
    
    # El abuelo no quiere limpiar el ba√±o (funci√≥n lambda que filtra "Limpiar ba√±o")
    problema.addConstraint(lambda t: t != "Limpiar ba√±o", ["Abuelo"])
    
    # Mam√° solo quiere cocinar o hacer compras (funci√≥n lambda que filtra esas opciones)
    problema.addConstraint(lambda t: t in ["Cocinar", "Hacer compras"], ["Mam√°"])
    
    # Hijo solo puede aspirar o pasear al perro (funci√≥n lambda que filtra esas opciones)
    problema.addConstraint(lambda t: t in ["Aspirar", "Pasear al perro"], ["Hijo"])
    
    # Pap√° se niega a lavar platos (funci√≥n lambda que excluye esa opci√≥n)
    problema.addConstraint(lambda t: t != "Lavar platos", ["Pap√°"])
    
    # Hija prefiere regar plantas o lavar ropa (funci√≥n lambda que filtra esas opciones)
    problema.addConstraint(lambda t: t in ["Regar plantas", "Lavar ropa"], ["Hija"])
    
    # c) Restricciones entre familiares (relaciones)
    
    # Si pap√° cocina, entonces el hijo debe lavar platos
    # La funci√≥n lambda implementa esta l√≥gica condicional
    problema.addConstraint(
        lambda t1, t2: t1 != "Cocinar" or t2 == "Lavar platos",  # Si t1 es Cocinar, t2 debe ser Lavar platos
        ["Pap√°", "Hijo"]  # Aplica esta restricci√≥n entre Pap√° e Hijo
    )
    
    # 6. Obtener todas las soluciones posibles que satisfacen las restricciones
    # getSolutions() retorna una lista de diccionarios con todas las asignaciones v√°lidas
    soluciones = problema.getSolutions()
    
    # 7. Mostrar los resultados obtenidos
    
    # Imprimir cu√°ntas soluciones v√°lidas se encontraron
    print("üí° Soluciones encontradas:", len(soluciones))
    
    # Mostrar una soluci√≥n espec√≠fica (la primera de la lista)
    print("\n‚ú® Una soluci√≥n posible:")
    for familiar, tarea in soluciones[0].items():  # Iterar sobre el primer diccionario de soluci√≥n
        print(f"{familiar}: {tarea}")  # Imprimir cada familiar con su tarea asignada
    
    # 8. Visualizaci√≥n creativa de la distribuci√≥n de tareas
    
    print("\nüìä Distribuci√≥n de tareas:")
    # Convertir los valores del diccionario (tareas) a una lista
    tareas_asignadas = list(soluciones[0].values())
    
    # Para cada tarea √∫nica en la soluci√≥n
    for tarea in set(tareas_asignadas):
        # Contar cu√°ntas veces aparece la tarea (en este caso siempre ser√° 1 por AllDifferentConstraint)
        count = tareas_asignadas.count(tarea)
        # Imprimir la tarea con emojis de estrella (‚≠ê) seg√∫n el conteo
        print(f"{tarea}: {'‚≠ê' * count}")

# Bloque principal que se ejecuta cuando el script es llamado directamente
if __name__ == "__main__":
    # Mostrar t√≠tulo del programa
    print("üè† ASIGNACI√ìN INTELIGENTE DE TAREAS DOM√âSTICAS üè†")
    print("Resolviendo con Satisfacci√≥n de Restricciones...\n")
    
    # Llamar a la funci√≥n principal
    asignar_tareas_familia()