# Importaci√≥n de m√≥dulos necesarios
# heapq: Para implementar la cola de prioridad (usaremos heappush y heappop)
# defaultdict: Para crear diccionarios con valores por defecto (aunque no se usa directamente aqu√≠)
import heapq
from collections import defaultdict

# =============================================
# DEFINICI√ìN DE LA RED DEL METRO DE GUADALAJARA
# =============================================
# Estructura de datos: Grafo representado como diccionario de diccionarios
# Cada clave es una estaci√≥n, y su valor es otro diccionario con:
#   - Clave: estaci√≥n conectada
#   - Valor: tiempo aproximado de viaje en minutos (aunque en este algoritmo no se usa)
metro_gdl = {
    # L√≠nea 1 (Verde) - Sur a Norte
    'Perif√©rico Sur': {'Santuario': 5},  # 5 minutos a Santuario
    'Santuario': {
        'Perif√©rico Sur': 5,  # Conexi√≥n bidireccional
        'Washington': 3  # 3 minutos a Washington
    },
    'Washington': {
        'Santuario': 3,
        'Ju√°rez': 2  # 2 minutos a Ju√°rez (estaci√≥n de transbordo)
    },
    # Ju√°rez es estaci√≥n de transbordo entre L√≠nea 1 y L√≠nea 2
    'Ju√°rez': {
        'Washington': 2,
        'Mexicaltzingo': 2,  # Continuaci√≥n L√≠nea 1
        'Plaza Universidad': 2  # Conexi√≥n a L√≠nea 2
    },
    'Mexicaltzingo': {
        'Ju√°rez': 2,
        'Oblatos': 3  # 3 minutos a Oblatos
    },
    
    # L√≠nea 2 (Amarilla) - Centro
    'Plaza Universidad': {
        'Ju√°rez': 2,
        'San Juan de Dios': 3  # 3 minutos a San Juan de Dios
    },
    'San Juan de Dios': {
        'Plaza Universidad': 3,
        'Belisario Dom√≠nguez': 2  # 2 minutos a Belisario Dom√≠nguez
    },
    
    # L√≠nea 3 (Roja) - Occidente a Oriente
    'Central de Autobuses': {
        'Perif√©rico Belenes': 4  # 4 minutos a Perif√©rico Belenes
    },
    'Perif√©rico Belenes': {
        'Central de Autobuses': 4,
        'San Andr√©s': 3  # 3 minutos a San Andr√©s
    },
    # Nota: En la realidad, la L√≠nea 3 tiene m√°s estaciones
}

# =============================================
# HEUR√çSTICAS PARA LA B√öSQUEDA
# =============================================
# Diccionario que asigna a cada estaci√≥n un valor heur√≠stico (estimado)
# Representa la "distancia estimada" en n√∫mero de estaciones hasta Plaza Universidad (nuestro destino)
heuristicas_gdl = {
    'Perif√©rico Sur': 6,  # Estimado: 6 estaciones de distancia
    'Santuario': 5,
    'Washington': 3,
    'Ju√°rez': 1,  # Solo 1 estaci√≥n de Plaza Universidad
    'Mexicaltzingo': 2,
    'Oblatos': 3,
    'Plaza Universidad': 0,  # ¬°Estamos aqu√≠!
    'San Juan de Dios': 1,
    'Belisario Dom√≠nguez': 2,
    'Central de Autobuses': 4,
    'Perif√©rico Belenes': 3,
    'San Andr√©s': 2
}

# =============================================
# FUNCI√ìN PRINCIPAL DE B√öSQUEDA VORAZ
# =============================================
def buscar_ruta_metro(origen, destino):
    # Inicializamos una cola de prioridad (min-heap)
    cola_prioridad = []
    
    # El heap almacenar√° tuplas con:
    # 1. Valor heur√≠stico (para priorizar)
    # 2. Nombre de la estaci√≥n actual
    # 3. Lista con el camino recorrido hasta ahora
    heapq.heappush(cola_prioridad, (heuristicas_gdl[origen], origen, [origen]))
    
    # Conjunto para llevar registro de estaciones ya visitadas
    # Evitamos ciclos infinitos y reprocesamiento
    visitados = set()
    
    # Mensaje inicial
    print(f"üîç Buscando ruta de {origen} a {destino}...")
    
    # Bucle principal: se ejecuta mientras haya nodos por explorar
    while cola_prioridad:
        # Extraemos la estaci√≥n con menor valor heur√≠stico
        _, estacion, ruta = heapq.heappop(cola_prioridad)
        
        # Condici√≥n de √©xito: hemos llegado al destino
        if estacion == destino:
            # Calculamos estad√≠sticas de la ruta
            num_transbordos = len([x for x in ruta if x == 'Ju√°rez']) - 1
            
            # Mostramos resultados
            print(f"\nüéâ Ruta encontrada ({num_transbordos} transbordos):")
            print(" ‚Üí ".join(ruta))
            print("\nüìä Estad√≠sticas:")
            print(f"üöá Estaciones totales: {len(ruta)}")
            print(f"üîÑ Transbordos: {num_transbordos}")
            return ruta
            
        # Si no hemos visitado esta estaci√≥n...
        if estacion not in visitados:
            # La marcamos como visitada
            visitados.add(estacion)
            
            # Exploramos todas sus conexiones
            for conexion, _ in metro_gdl.get(estacion, {}).items():
                # Si la conexi√≥n no ha sido visitada
                if conexion not in visitados:
                    # Calculamos la nueva ruta (camino actual + nueva estaci√≥n)
                    nueva_ruta = ruta + [conexion]
                    
                    # A√±adimos a la cola de prioridad con su valor heur√≠stico
                    heapq.heappush(cola_prioridad, 
                                 (heuristicas_gdl[conexion], 
                                  conexion, 
                                  nueva_ruta))
    
    # Si salimos del while sin retornar, no hay ruta
    print("\n‚ö†Ô∏è No hay ruta disponible")
    return None

# =============================================
# EJECUCI√ìN DEL PROGRAMA
# =============================================
print("=== SISTEMA DE RUTAS DEL METRO DE GUADALAJARA ===")
print("=== (Algoritmo de B√∫squeda Voraz) ===")
print("\nEstaciones disponibles:")
print(", ".join(metro_gdl.keys()))

# Definimos origen y destino
origen = 'Perif√©rico Sur'
destino = 'Plaza Universidad'

# Ejecutamos la b√∫squeda
buscar_ruta_metro(origen, destino)