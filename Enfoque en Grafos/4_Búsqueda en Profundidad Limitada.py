# Importaci칩n de m칩dulos necesarios
import time       # Para controlar pausas en la ejecuci칩n
import random     # Para aleatorizar el orden de exploraci칩n

# =============================================
# CONFIGURACI칍N INICIAL DEL ENTORNO DE SIMULACI칍N
# =============================================

# Definici칩n del mapa del suelo como una matriz 5x5
# 'T' = Tierra (espacio disponible para crecimiento)
# 'N' = Nutriente (objetivo a encontrar)
# 'P' = Piedra (obst치culo infranqueable)
# 'R' = Ra칤z (posici칩n actual de la ra칤z)
suelo = [
    ['T', 'T', 'T', 'T', 'T'],  # Fila 0
    ['T', 'P', 'T', 'N', 'T'],  # Fila 1
    ['T', 'T', 'P', 'T', 'T'],  # Fila 2
    ['T', 'N', 'T', 'P', 'T'],  # Fila 3
    ['T', 'T', 'T', 'T', 'N']   # Fila 4
]

# Posici칩n inicial de la ra칤z en el centro del mapa (fila 2, columna 2)
posicion_inicial = (2, 2)  # Tupla con coordenadas (x, y)

# Marcamos la posici칩n inicial como ra칤z en el mapa
suelo[posicion_inicial[0]][posicion_inicial[1]] = 'R'

# =============================================
# DEFINICI칍N DE FUNCIONES PRINCIPALES
# =============================================

def mostrar_suelo():
    """
    Funci칩n que muestra visualmente el estado actual del suelo.
    Imprime la matriz con formato legible y hace una pausa.
    """
    # Imprime un salto de l칤nea para separar visualmente
    print("\nEstado del suelo:")
    
    # Itera sobre cada fila de la matriz suelo
    for fila in suelo:
        # Une los elementos de la fila con espacios y la imprime
        print(" ".join(fila))
    
    # Imprime otro salto de l칤nea al final
    print()
    
    # Pausa la ejecuci칩n por 1 segundo para visualizaci칩n
    time.sleep(1)

def dls_crecimiento_raiz(x, y, profundidad_actual, limite_profundidad, nutrientes_encontrados):
    """
    Funci칩n recursiva que implementa el algoritmo DLS para simular el crecimiento de ra칤ces.
    
    Par치metros:
        x (int): Coordenada x (fila) actual
        y (int): Coordenada y (columna) actual
        profundidad_actual (int): Profundidad actual de recursi칩n
        limite_profundidad (int): L칤mite m치ximo de profundidad
        nutrientes_encontrados (list): Lista para almacenar nutrientes encontrados
    
    La funci칩n modifica la matriz suelo directamente y actualiza nutrientes_encontrados.
    """
    
    # 1. Mostrar el estado actual del suelo
    mostrar_suelo()
    
    # 2. Condici칩n de 칠xito: Encontrar un nutriente
    if suelo[x][y] == 'N':
        print(f"춰Nutriente encontrado en ({x}, {y})!")
        # Registrar la posici칩n del nutriente encontrado
        nutrientes_encontrados.append((x, y))
        # Marcar la posici칩n como ra칤z (la ra칤z absorbe el nutriente)
        suelo[x][y] = 'R'
        return  # Terminar esta rama de exploraci칩n
    
    # 3. Condici칩n de l칤mite: Profundidad m치xima alcanzada
    if profundidad_actual >= limite_profundidad:
        print(f"L칤mite de profundidad alcanzado en ({x}, {y})")
        return  # Terminar esta rama por haber alcanzado el l칤mite
    
    # 4. Preparar direcciones de exploraci칩n (arriba, abajo, izquierda, derecha)
    direcciones = [
        (-1, 0),  # Arriba (decrementar fila)
        (1, 0),   # Abajo (incrementar fila)
        (0, -1),  # Izquierda (decrementar columna)
        (0, 1)    # Derecha (incrementar columna)
    ]
    
    # Mezclar aleatoriamente las direcciones para crecimiento m치s natural
    random.shuffle(direcciones)
    
    # 5. Explorar cada direcci칩n posible
    for dx, dy in direcciones:
        # Calcular nueva posici칩n
        nx = x + dx  # Nueva coordenada x
        ny = y + dy  # Nueva coordenada y
        
        # Verificar si la nueva posici칩n est치 dentro de los l칤mites del mapa
        if 0 <= nx < len(suelo) and 0 <= ny < len(suelo[0]):
            # Verificar si la nueva posici칩n es tierra o nutriente
            if suelo[nx][ny] in ['T', 'N']:
                # Marcar la nueva posici칩n como ra칤z
                suelo[nx][ny] = 'R'
                
                # Llamada recursiva para continuar el crecimiento
                dls_crecimiento_raiz(
                    nx, ny, 
                    profundidad_actual + 1, 
                    limite_profundidad, 
                    nutrientes_encontrados
                )

# =============================================
# PROGRAMA PRINCIPAL - SIMULACI칍N
# =============================================

# Mostrar encabezado del simulador
print("游꺔 SIMULADOR DE CRECIMIENTO DE RA칈CES 游꺔")
print("Objetivo: Encontrar nutrientes (N) evitando piedras (P)")
print("S칤mbolos: R=Ra칤z, T=Tierra, N=Nutriente, P=Piedra\n")

# Mostrar el estado inicial del suelo
mostrar_suelo()

# Configurar par치metros de la simulaci칩n
try:
    # Solicitar al usuario el l칤mite de profundidad
    limite_crecimiento = int(input("Ingresa el l칤mite de profundidad para las ra칤ces (1-5): "))
    # Validar el rango de entrada
    if not 1 <= limite_crecimiento <= 5:
        raise ValueError
except ValueError:
    print("Valor inv치lido. Usando valor por defecto: 3")
    limite_crecimiento = 3

# Lista para almacenar nutrientes encontrados
nutrientes = []

# Iniciar el proceso de crecimiento
print("\nIniciando crecimiento de ra칤ces...")
dls_crecimiento_raiz(
    posicion_inicial[0],  # Coordenada x inicial
    posicion_inicial[1],  # Coordenada y inicial
    0,                    # Profundidad inicial (0)
    limite_crecimiento,   # L칤mite de profundidad
    nutrientes            # Lista para almacenar resultados
)

# =============================================
# MOSTRAR RESULTADOS FINALES
# =============================================

# Resumen de la simulaci칩n
print("\n游눦 Resumen del crecimiento:")
print(f"Nutrientes encontrados: {len(nutrientes)}")
print(f"Posiciones: {nutrientes}")

# Mostrar el estado final del mapa
print("Mapa final:")
mostrar_suelo()