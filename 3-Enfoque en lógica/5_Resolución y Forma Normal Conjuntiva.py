# Importamos las librer√≠as necesarias de sympy
from sympy import symbols  # Para definir las variables simb√≥licas en las f√≥rmulas l√≥gicas
from sympy.logic.boolalg import to_cnf, Or, And, Not  # Para manipular y convertir las f√≥rmulas a CNF (Forma Normal Conjuntiva) y operadores l√≥gicos
from sympy.logic.inference import satisfiable  # Para determinar si una f√≥rmula es satisfacible
from sympy.parsing.sympy_parser import parse_expr  # Para analizar las f√≥rmulas l√≥gicas ingresadas por el usuario
from sympy.logic.boolalg import is_tautology  # Para verificar si una f√≥rmula es una tautolog√≠a (si es v√°lida en todos los casos)

# üöÄ Funci√≥n para verificar si dos f√≥rmulas son equivalentes
def verificar_equivalencia(formula1, formula2):
    # La funci√≥n 'equals' compara dos f√≥rmulas y devuelve True si son equivalentes
    if formula1.equals(formula2):  # Si las f√≥rmulas son equivalentes
        print("‚úÖ Las f√≥rmulas son equivalentes.")  # Mensaje de confirmaci√≥n si son equivalentes
    else:
        print("‚ö†Ô∏è Las f√≥rmulas NO son equivalentes.")  # Mensaje de advertencia si no son equivalentes

# üéØ Funci√≥n para convertir una f√≥rmula a su Forma Normal Conjuntiva (CNF)
def convertir_a_cnf(formula):
    cnf = to_cnf(formula, simplify=True)  # Convierte la f√≥rmula a su forma normal conjuntiva (FNC) y la simplifica
    return cnf  # Retorna la f√≥rmula convertida a CNF

# üîÑ Funci√≥n para aplicar la resoluci√≥n a un conjunto de cl√°usulas
def resolver(clausulas):
    nuevos = set()  # Usamos un set para almacenar los nuevos resolventes generados
    # Convertimos las cl√°usulas a conjuntos de literales para que sea m√°s f√°cil comparar
    clausulas = [set([c]) if not isinstance(c.args, tuple) else set(c.args) for c in clausulas]

    # Bucle principal de resoluci√≥n
    while True:
        # Generamos todos los pares posibles de cl√°usulas para intentar resolverlas
        pares = [(clausulas[i], clausulas[j]) for i in range(len(clausulas)) for j in range(i + 1, len(clausulas))]
        for (ci, cj) in pares:  # Iteramos sobre cada par de cl√°usulas
            for di in ci:  # Iteramos sobre cada literal en la primera cl√°usula
                for dj in cj:  # Iteramos sobre cada literal en la segunda cl√°usula
                    # Si encontramos literales opuestos, los resolvemos (eliminamos los literales opuestos)
                    if di == ~dj or ~di == dj:
                        # Generamos el resolvente, que es la uni√≥n de las cl√°usulas sin los literales opuestos
                        resolvente = (ci - {di}) | (cj - {dj})
                        if not resolvente:
                            print("üéØ Se lleg√≥ a una cl√°usula vac√≠a: f√≥rmula insatisfacible (es v√°lida)")
                            return True  # Si obtenemos una cl√°usula vac√≠a, la f√≥rmula es insatisfacible (es v√°lida)
                        nuevos.add(frozenset(resolvente))  # A√±adimos el resolvente a los nuevos resolventes
        # Si los nuevos resolventes no agregan nada nuevo, terminamos
        if nuevos.issubset(map(frozenset, clausulas)):
            return False  # Si no se generaron m√°s resolventes, la f√≥rmula no es satisfacible
        for n in nuevos:  # A√±adimos los nuevos resolventes a las cl√°usulas
            if set(n) not in clausulas:  # Si el resolvente no est√° ya en las cl√°usulas
                clausulas.append(set(n))  # Lo a√±adimos a la lista de cl√°usulas

# ‚úÖ Funci√≥n para generar la tabla de verdad de una f√≥rmula l√≥gica
def tabla_de_verdad(formula, variables):
    from itertools import product  # Usamos product para generar todas las combinaciones posibles de valores de verdad
    result = []  # Lista para almacenar los resultados de la tabla de verdad
    # Generamos todas las combinaciones posibles de valores de verdad para las variables
    for valores in product([False, True], repeat=len(variables)):
        assignment = dict(zip(variables, valores))  # Creamos un diccionario que asigna valores de verdad a las variables
        result.append([assignment, formula.subs(assignment)])  # Evaluamos la f√≥rmula con la asignaci√≥n de valores y la a√±adimos al resultado
    return result  # Retorna la lista con la tabla de verdad

# Funci√≥n principal para interactuar con el usuario
def main():
    # Definimos las variables l√≥gicas que usaremos
    A, B, C = symbols('A B C')

    print("üß© Bienvenido al Verificador L√≥gico")  # Mensaje inicial de bienvenida

    while True:  # Bucle principal para seguir pidiendo f√≥rmulas
        # Entrada de f√≥rmulas por parte del usuario
        entrada1 = input("\nIngresa la primera f√≥rmula (o 'salir' para terminar): ")
        if entrada1.lower() == 'salir':  # Si el usuario escribe 'salir', terminamos el programa
            break
        entrada2 = input("Ingresa la segunda f√≥rmula: ")

        try:
            # Intentamos parsear las f√≥rmulas ingresadas por el usuario
            formula1 = parse_expr(entrada1, evaluate=False)  # Convertimos la cadena de texto en una expresi√≥n l√≥gica
            formula2 = parse_expr(entrada2, evaluate=False)  # Hacemos lo mismo con la segunda f√≥rmula
        except Exception as e:  # Si ocurre alg√∫n error durante el parseo, mostramos un mensaje de error
            print("‚ùå Error al interpretar:", e)
            continue  # Volvemos a pedir las f√≥rmulas si ocurri√≥ un error

        print("\nüì¶ F√≥rmula 1:", formula1)  # Mostramos la primera f√≥rmula
        print("üì¶ F√≥rmula 2:", formula2)  # Mostramos la segunda f√≥rmula

        # Verificamos si las f√≥rmulas son equivalentes
        verificar_equivalencia(formula1, formula2)

        # Convertimos ambas f√≥rmulas a CNF (Forma Normal Conjuntiva)
        cnf1 = convertir_a_cnf(formula1)
        cnf2 = convertir_a_cnf(formula2)

        print("üìö Forma Normal Conjuntiva (FNC) de F√≥rmula 1:", cnf1)  # Mostramos la FNC de la primera f√≥rmula
        print("üìö Forma Normal Conjuntiva (FNC) de F√≥rmula 2:", cnf2)  # Mostramos la FNC de la segunda f√≥rmula

        # Aplicamos resoluci√≥n para determinar si las f√≥rmulas son v√°lidas
        print("\nüîÑ Resolviendo F√≥rmula 1...")
        clausulas1 = extraer_clausulas(cnf1)  # Extraemos las cl√°usulas de la CNF de la f√≥rmula 1
        valido1 = resolver(clausulas1)  # Aplicamos la resoluci√≥n sobre las cl√°usulas de la f√≥rmula 1
        if valido1:  # Si la f√≥rmula 1 es v√°lida
            print("‚úÖ F√≥rmula 1 es v√°lida.")
        else:  # Si la f√≥rmula 1 no es v√°lida
            print("‚ö†Ô∏è F√≥rmula 1 NO es v√°lida.")

        print("\nüîÑ Resolviendo F√≥rmula 2...")
        clausulas2 = extraer_clausulas(cnf2)  # Extraemos las cl√°usulas de la CNF de la f√≥rmula 2
        valido2 = resolver(clausulas2)  # Aplicamos la resoluci√≥n sobre las cl√°usulas de la f√≥rmula 2
        if valido2:  # Si la f√≥rmula 2 es v√°lida
            print("‚úÖ F√≥rmula 2 es v√°lida.")
        else:  # Si la f√≥rmula 2 no es v√°lida
            print("‚ö†Ô∏è F√≥rmula 2 NO es v√°lida.")

        # Generamos la tabla de verdad para ambas f√≥rmulas
        variables = [A, B, C]  # Definimos las variables que usaremos en las tablas de verdad
        print("\nüîé Tabla de verdad para la F√≥rmula 1:")
        t1 = tabla_de_verdad(formula1, variables)  # Generamos la tabla de verdad de la f√≥rmula 1
        for entrada, valor in t1:  # Iteramos sobre las entradas y sus valores en la tabla de verdad
            print(f"{entrada} => {valor}")  # Mostramos cada asignaci√≥n de valores y el resultado de la f√≥rmula

        print("\nüîé Tabla de verdad para la F√≥rmula 2:")
        t2 = tabla_de_verdad(formula2, variables)  # Generamos la tabla de verdad de la f√≥rmula 2
        for entrada, valor in t2:  # Iteramos sobre las entradas y sus valores en la tabla de verdad
            print(f"{entrada} => {valor}")  # Mostramos cada asignaci√≥n de valores y el resultado de la f√≥rmula

# Ejecutamos el programa si es que este archivo es el principal
if __name__ == "__main__":
    main()
