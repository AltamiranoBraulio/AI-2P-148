#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PLANIFICACI√ìN CONDICIONAL PARA ROBOT REPARTIDOR - VERSI√ìN CORREGIDA
"""

import random
from typing import Dict, List, Tuple, Optional, Callable

# =============================================================================
# DEFINICI√ìN DEL MODELO DEL MUNDO (ESTADOS Y ACCIONES)
# =============================================================================

class Estado:
    """Representa un estado del mundo con variables l√≥gicas."""
    def __init__(self, bateria: int, paquete_entregado: bool, ubicacion: str, obstaculo: bool):
        self.bateria = bateria
        self.paquete_entregado = paquete_entregado
        self.ubicacion = ubicacion
        self.obstaculo = obstaculo

    def __str__(self):
        return f"Bater√≠a: {self.bateria}%, Ubicaci√≥n: {self.ubicacion}, Paquete: {'Entregado' if self.paquete_entregado else 'No entregado'}, Obst√°culo: {'S√≠' if self.obstaculo else 'No'}"

# =============================================================================
# DEFINICI√ìN DE ACCIONES CON EFECTOS PROBABIL√çSTICOS
# =============================================================================

def mover(estado_actual: Estado, destino: str) -> Tuple[bool, Optional[Estado]]:
    """
    Acci√≥n MOVER: Intenta mover el robot a otra ubicaci√≥n.
    - Precondici√≥n: Bater√≠a > 20% y no hay obst√°culo.
    - Efectos probabil√≠sticos:
        - 80%: Movimiento exitoso (gasta 10% bater√≠a).
        - 20%: Fallo (obst√°culo aparece aleatoriamente).
    """
    if estado_actual.bateria <= 20:
        print("¬°Bater√≠a insuficiente para moverse!")
        return False, None
    
    if estado_actual.obstaculo:
        print("¬°Obst√°culo detectado! No se puede mover.")
        return False, None
    
    if random.random() < 0.8:
        nuevo_estado = Estado(
            bateria=estado_actual.bateria - 10,
            paquete_entregado=estado_actual.paquete_entregado,
            ubicacion=destino,
            obstaculo=False
        )
        print(f"‚úÖ Movimiento exitoso a {destino}. Bater√≠a ahora al {nuevo_estado.bateria}%.")
        return True, nuevo_estado
    else:
        print("‚ùå ¬°Fallo inesperado! Apareci√≥ un obst√°culo.")
        nuevo_estado = Estado(
            bateria=estado_actual.bateria - 5,
            paquete_entregado=estado_actual.paquete_entregado,
            ubicacion=estado_actual.ubicacion,
            obstaculo=True
        )
        return False, nuevo_estado

def entregar_paquete(estado_actual: Estado) -> Tuple[bool, Optional[Estado]]:
    """
    Acci√≥n ENTREGAR: Intenta entregar el paquete.
    - Precondici√≥n: Robot est√° en la ubicaci√≥n objetivo y bater√≠a > 10%.
    """
    if estado_actual.ubicacion != "Oficina":
        print("¬°No est√°s en la ubicaci√≥n de entrega!")
        return False, None
    
    if random.random() < 0.9:
        nuevo_estado = Estado(
            bateria=estado_actual.bateria - 5,
            paquete_entregado=True,
            ubicacion=estado_actual.ubicacion,
            obstaculo=estado_actual.obstaculo
        )
        print("üì¶ ¬°Paquete entregado con √©xito!")
        return True, nuevo_estado
    else:
        print("‚ùå ¬°Fallo en la entrega! Bater√≠a cr√≠tica.")
        return False, estado_actual

def esquivar_obstaculo(estado_actual: Estado) -> Tuple[bool, Optional[Estado]]:
    """
    Acci√≥n ESQUIVAR: Intenta remover un obst√°culo.
    - Precondici√≥n: Obst√°culo presente.
    """
    if not estado_actual.obstaculo:
        print("No hay obst√°culos para esquivar.")
        return False, None
    
    nuevo_estado = Estado(
        bateria=estado_actual.bateria - 15,
        paquete_entregado=estado_actual.paquete_entregado,
        ubicacion=estado_actual.ubicacion,
        obstaculo=False
    )
    print("üîÑ Obst√°culo eliminado.")
    return True, nuevo_estado

# =============================================================================
# ALGORITMO DE PLANIFICACI√ìN CONDICIONAL (BACKTRACKING)
# =============================================================================

def planificacion_condicional(estado: Estado, plan_actual: List[str], profundidad_max: int) -> Optional[List[str]]:
    """
    Funci√≥n recursiva que genera un plan contingente.
    - estado: Estado actual del mundo.
    - plan_actual: Secuencia de acciones acumuladas.
    - profundidad_max: L√≠mite para evitar recursi√≥n infinita.
    """
    if estado.paquete_entregado:
        return plan_actual
    
    if profundidad_max <= 0 or estado.bateria <= 0:
        return None
    
    # Definir posibles acciones y sus par√°metros
    acciones = [
        (mover, {"destino": "Oficina"}),  # Siempre intentamos mover a "Oficina"
        (entregar_paquete, {}),
        (esquivar_obstaculo, {})
    ]
    
    for accion, kwargs in acciones:
        print(f"\n‚ö° Intentando acci√≥n: {accion.__name__}")
        
        # Ejecutar acci√≥n con sus argumentos
        exito, nuevo_estado = accion(estado, **kwargs)
        
        if exito and nuevo_estado:
            nuevo_plan = plan_actual + [f"{accion.__name__}({', '.join(f'{k}={v}' for k, v in kwargs.items())})"]
            resultado = planificacion_condicional(nuevo_estado, nuevo_plan, profundidad_max - 1)
            if resultado:
                return resultado
        elif nuevo_estado:
            print("üîÑ Generando contingencia...")
            nuevo_plan = plan_actual + [f"Fallo_{accion.__name__}"]
            resultado = planificacion_condicional(nuevo_estado, nuevo_plan, profundidad_max - 1)
            if resultado:
                return resultado
    
    return None

# =============================================================================
# EJECUCI√ìN PRINCIPAL
# =============================================================================

if __name__ == "__main__":
    estado_inicial = Estado(
        bateria=100,
        paquete_entregado=False,
        ubicacion="Almac√©n",
        obstaculo=False
    )
    
    print("=== INICIO DEL PLANIFICADOR CONDICIONAL ===")
    print(f"Estado inicial: {estado_inicial}")
    
    plan_final = planificacion_condicional(estado_inicial, [], 10)
    
    if plan_final:
        print("\nüéâ ¬°Plan contingente encontrado!")
        print(" -> ".join(plan_final))
    else:
        print("\nüòµ No se pudo encontrar un plan v√°lido.")