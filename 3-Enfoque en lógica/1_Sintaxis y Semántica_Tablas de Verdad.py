import sympy
from sympy import symbols
from sympy.logic.boolalg import to_cnf
from sympy.logic.boolalg import is_tautology
from sympy.logic.boolalg import satisfiable

# Paso 1: Definir las variables l√≥gicas
p, q, r, s = symbols('p q r s')

# Paso 2: Pide al usuario que escriba su proposici√≥n l√≥gica en Python-style
print("Bienvenido al Analizador L√≥gico üöÄ")
print("Usa estas variables: p, q, r, s")
print("Operadores disponibles:")
print("  & (AND),  | (OR),  ~ (NOT),  >> (IMPLICA),  << (IMPLICADO POR)")
print("Ejemplo: (p & q) >> r")
user_input = input("\nEscribe tu proposici√≥n l√≥gica: ")

# Paso 3: Eval√∫a la proposici√≥n escrita por el usuario
try:
    proposicion = eval(user_input)
except Exception as e:
    print("Error en la f√≥rmula l√≥gica:", e)
    exit()

# Paso 4: Muestra la f√≥rmula bonita
print("\n‚úÖ Tu proposici√≥n es:", proposicion)

# Paso 5: Mostrar la tabla de verdad
print("\nüìä Tabla de Verdad:")
tabla = sympy.logic.boolalg.truthtable(proposicion)
for fila in tabla:
    print(fila)

# Paso 6: Mostrar forma normal conjuntiva (CNF)
cnf = to_cnf(proposicion, simplify=True)
print("\nüîé Forma Normal Conjuntiva (CNF):", cnf)

# Paso 7: Verificar si es tautolog√≠a, contradicci√≥n o contingencia
if is_tautology(proposicion):
    print("\nüéâ Resultado: Esta proposici√≥n es una TAUTOLOG√çA (siempre verdadera).")
elif not satisfiable(proposicion):
    print("\n‚ùå Resultado: Esta proposici√≥n es una CONTRADICCI√ìN (siempre falsa).")
else:
    print("\n‚ÑπÔ∏è Resultado: Esta proposici√≥n es una CONTINGENCIA (a veces verdadera, a veces falsa).")
