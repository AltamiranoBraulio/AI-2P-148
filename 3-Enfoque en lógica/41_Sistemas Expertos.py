# -*- coding: utf-8 -*-
"""
SISTEMA EXPERTO PARA DIAGN√ìSTICO DE FALLAS EN AUTOM√ìVILES
Autor: DeepSeek Chat
Tipo: Motor de Inferencia Basado en Reglas (Forward Chaining)
"""

# ==================== IMPORTAR LIBRER√çAS ====================
import sys  # Para manejar la salida del programa

# ==================== BASE DE CONOCIMIENTO (REGLAS) ====================
# Las reglas se definen como diccionarios que relacionan s√≠ntomas con diagn√≥sticos.
# Formato: {"s√≠ntomas": ["s√≠ntoma1", "s√≠ntoma2"], "diagn√≥stico": "falla", "soluci√≥n": "recomendaci√≥n"}

REGLA_DIAGNOSTICO = [
    {
        "s√≠ntomas": ["El auto no enciende", "No hay sonido al girar la llave"],
        "diagn√≥stico": "Bater√≠a descargada",
        "soluci√≥n": "Recarga o reemplaza la bater√≠a. Verifica los bornes."
    },
    {
        "s√≠ntomas": ["El auto no enciende", "El motor hace clic pero no arranca"],
        "diagn√≥stico": "Problema con el motor de arranque",
        "soluci√≥n": "Revisa el motor de arranque o el solenoide."
    },
    {
        "s√≠ntomas": ["El auto se apaga repentinamente", "Humo negro del escape"],
        "diagn√≥stico": "Problema en el sistema de combustible",
        "soluci√≥n": "Limpia o reemplaza los inyectores de combustible."
    },
    {
        "s√≠ntomas": ["Sobrecalentamiento del motor", "Fuga de l√≠quido refrigerante"],
        "diagn√≥stico": "Fuga en el sistema de refrigeraci√≥n",
        "soluci√≥n": "Revisa mangueras, radiador y tapa del refrigerante."
    },
    {
        "s√≠ntomas": ["Ruido anormal al frenar", "Vibraci√≥n en el volante"],
        "diagn√≥stico": "Frenos desgastados",
        "soluci√≥n": "Reemplaza las pastillas o discos de freno."
    }
]

# ==================== FUNCI√ìN PARA OBTENER S√çNTOMAS DEL USUARIO ====================
def obtener_s√≠ntomas():
    """
    Pregunta al usuario qu√© s√≠ntomas experimenta y los retorna en una lista.
    """
    s√≠ntomas_usuario = []
    print("\n=== SISTEMA EXPERTO DE DIAGN√ìSTICO DE AUTOS ===")
    print("Por favor, indica los s√≠ntomas que presenta tu veh√≠culo (ingresa 'fin' para terminar):")
    
    while True:
        s√≠ntoma = input("> ").strip()  # Elimina espacios en blanco
        
        if s√≠ntoma.lower() == "fin":
            break  # Termina el ingreso de s√≠ntomas
        
        if s√≠ntoma:  # Asegura que no se ingresen cadenas vac√≠as
            s√≠ntomas_usuario.append(s√≠ntoma)
        else:
            print("‚ö†Ô∏è Por favor, ingresa un s√≠ntoma v√°lido o escribe 'fin'.")
    
    return s√≠ntomas_usuario

# ==================== FUNCI√ìN PARA EVALUAR REGLAS (MOTOR DE INFERENCIA) ====================
def evaluar_reglas(s√≠ntomas_usuario):
    """
    Compara los s√≠ntomas del usuario con las reglas de diagn√≥stico.
    Retorna una lista de diagn√≥sticos posibles.
    """
    diagn√≥sticos_posibles = []
    
    # Itera sobre cada regla en la base de conocimiento
    for regla in REGLA_DIAGNOSTICO:
        s√≠ntomas_regla = regla["s√≠ntomas"]
        # Verifica si TODOS los s√≠ntomas de la regla est√°n en los s√≠ntomas del usuario
        if all(s√≠ntoma in s√≠ntomas_usuario for s√≠ntoma in s√≠ntomas_regla):
            diagn√≥sticos_posibles.append({
                "diagn√≥stico": regla["diagn√≥stico"],
                "soluci√≥n": regla["soluci√≥n"]
            })
    
    return diagn√≥sticos_posibles

# ==================== FUNCI√ìN PARA MOSTRAR RESULTADOS ====================
def mostrar_resultados(diagn√≥sticos):
    """
    Muestra los diagn√≥sticos y soluciones encontrados.
    """
    if not diagn√≥sticos:
        print("\nüîç No se encontr√≥ un diagn√≥stico claro. Revisa manualmente o consulta un mec√°nico.")
    else:
        print("\n=== DIAGN√ìSTICOS POSIBLES ===")
        for idx, diag in enumerate(diagn√≥sticos, 1):
            print(f"\n{idx}. **{diag['diagn√≥stico']}**")
            print(f"   Soluci√≥n: {diag['soluci√≥n']}")

# ==================== FUNCI√ìN PRINCIPAL ====================
def sistema_experto_automotriz():
    """
    Funci√≥n principal que orquesta el sistema experto:
    1. Obtiene s√≠ntomas del usuario.
    2. Eval√∫a las reglas.
    3. Muestra los diagn√≥sticos.
    """
    s√≠ntomas = obtener_s√≠ntomas()  # Paso 1: Obtener entrada del usuario
    
    if not s√≠ntomas:  # Si no hay s√≠ntomas ingresados
        print("‚ùå No se ingresaron s√≠ntomas. Saliendo...")
        sys.exit(0)
    
    diagn√≥sticos = evaluar_reglas(s√≠ntomas)  # Paso 2: Evaluar reglas
    
    mostrar_resultados(diagn√≥sticos)  # Paso 3: Mostrar resultados

# ==================== EJECUCI√ìN DEL PROGRAMA ====================
if __name__ == "__main__":
    sistema_experto_automotriz()  # Inicia el sistema experto